{"version":3,"sources":["types/apiTypes.ts","config/env.ts","stubs/index.ts","data/index.ts","components/PizzaToggle/index.tsx","containers/Modal/index.tsx","components/Divider/index.tsx","utils/index.ts","containers/SizePicker/index.tsx","components/CardToggle/index.tsx","containers/CrustTypePicker/index.tsx","containers/ToppingsPicker/index.tsx","containers/PizzaForm/index.tsx","containers/PizzaPreview/index.tsx","containers/OrderInfo/index.tsx","containers/OrderButton/index.tsx","containers/OrderSection/index.tsx","containers/PizzaDisplay/index.tsx","App.tsx","index.tsx"],"names":["ToppingName","OrderSize","SERVER_HOST","process","REACT_APP_SERVER_HOST","SERVER_HTTP_PORT","Number","REACT_APP_SERVER_HTTP_PORT","orderSizeInfoStub","Small","price","inches","maximumToppings","Medium","Large","toppingsStub","name","Pepperoni","onPizza","Mushrooms","titleColor","Onion","Sausage","Bacon","ExtraCheese","BlackOlives","GreenPeppers","Pineapple","Spinach","sleep","ms","Promise","resolve","setTimeout","fetchStubStoreFabric","stubData","timeout","a","getDefaultStore","defaultData","data","isLoading","error","PizzaToggleToppingShape","fetchOrderSizeInfo","fetchToppings","sendNewOrder","sendData","sendDataStubStoreFabric","Context","React","createContext","orderSizeInfo","toppings","order","size","isThick","setOrder","isFormValid","setIsFormValid","modalContent","header","body","setModalContent","isModalShow","setIsModalShow","ModalContainer","useContext","handleClose","className","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Divider","props","text","formatToppingText","str","_","replace","formatPrice","amount","currencyId","options","style","currency","minimumFractionDigits","Intl","NumberFormat","format","getRemoveToppingsModalContent","length","SizePicker","handleSetOrder","prev","Spinner","animation","Alert","Object","entries","map","i","classes","details","filter","entry","join","PizzaTogglePizzaShape","mapToppingNameToToppingShape","Round","Gull","Ring","Oval","Square","PizzaToggle","checked","onChange","e","toppingName","toppingShape","pizzaShape","Default","titleText","camelCase","color","type","Array","fill","val","index","CardToggle","imgSrc","alt","src","CrustTypePicker","Thick","ToppingsPicker","toggleSelect","topping","newToppings","t","PizzaForm","PizzaPreview","OrderInfo","console","log","sizePrice","crustTypePrice","toppingsPrice","totalPrice","OrderButton","useState","seIsLoading","response","String","OrderSection","PizzaDisplay","App","setToppings","setOrderSizeInfo","useEffect","then","toppingsRequest","catch","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa9bd5cc.chunk.js","sourcesContent":["export interface OrderSizeInfo {\n  [size: string]: {\n    price: number;\n    inches: number;\n    maximumToppings: number;\n  };\n}\n\nexport enum ToppingName {\n  Pepperoni = 'pepperoni',\n  Mushrooms = 'mushrooms',\n  Onion = 'onion',\n  Sausage = 'sausage',\n  Bacon = 'bacon',\n  ExtraCheese = 'extra-cheese',\n  BlackOlives = 'black-olives',\n  GreenPeppers = 'green-peppers',\n  Pineapple = 'pineapple',\n  Spinach = 'spinach',\n}\n\nexport interface ToppingData {\n  name: ToppingName;\n  onPizza?: string;\n  titleColor?: string;\n}\n\nexport enum OrderSize {\n  Small = 'small',\n  Medium = 'medium',\n  Large = 'large',\n}\n\nexport type Order = {\n  size: OrderSize;\n  isThick: boolean;\n  toppings: ToppingData[];\n};\n","export const SERVER_HOST = process.env.REACT_APP_SERVER_HOST || 'http://localhost';\nexport const SERVER_HTTP_PORT = Number(process.env.REACT_APP_SERVER_HTTP_PORT) || 3021;\nexport const IS_STUBS = process.env.REACT_APP_IS_STUBS === 'true';\n\n","import { OrderSize, OrderSizeInfo, ToppingData, ToppingName } from '../types/apiTypes';\n\nexport const orderSizeInfoStub: OrderSizeInfo = {\n  [OrderSize.Small]: { price: 800, inches: 8, maximumToppings: 5 },\n  [OrderSize.Medium]: { price: 1_000, inches: 12, maximumToppings: 7 },\n  [OrderSize.Large]: { price: 1_200, inches: 16, maximumToppings: 9 }\n};\n\nexport const toppingsStub: ToppingData[] = [\n  { name: ToppingName.Pepperoni, onPizza: 'pepperoni.png'},\n  { name: ToppingName.Mushrooms, onPizza: 'mushrooms.png', titleColor: 'black' },\n  { name: ToppingName.Onion, onPizza: 'onions.png', titleColor: 'black' },\n  { name: ToppingName.Sausage, onPizza: 'sausage.png' },\n  { name: ToppingName.Bacon, onPizza: 'bacon.png', titleColor: 'black' },\n  { name: ToppingName.ExtraCheese, onPizza: 'extra-cheese.png', titleColor: 'black' },\n  { name: ToppingName.BlackOlives, onPizza: 'black-olives.png' },\n  { name: ToppingName.GreenPeppers, onPizza: 'green-peppers.png' },\n  { name: ToppingName.Pineapple, onPizza: 'pineapple.png', titleColor: 'black' },\n  { name: ToppingName.Spinach, onPizza: 'spinach.png' },\n];\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function fetchStubStoreFabric<T = any> (stubData: T, timeout: number = 500) {\n  return async (): Promise<T> => {\n    await sleep(timeout)\n    return stubData;\n  }\n}\n\nexport function sendDataStubStoreFabric<I = any, O = any> (stubData: O, timeout: number = 500) {\n  return async (sendData: I): Promise<O> => {\n    await sleep(timeout)\n    return stubData;\n  }\n}\n\n","import React from 'react';\nimport { IS_STUBS, SERVER_HOST, SERVER_HTTP_PORT } from '../config/env';\nimport { ModalContent } from '../types';\nimport { Order, OrderSize, OrderSizeInfo, ToppingData } from '../types/apiTypes';\nimport { fetchStubStoreFabric, orderSizeInfoStub, sendDataStubStoreFabric, toppingsStub } from '../stubs';\n\nexport interface StoreItem<T = any> {\n  data: T;\n  isLoading: boolean;\n  error: string;\n}\n\nconst hostUrl = `${SERVER_HOST}:${SERVER_HTTP_PORT}`;\n\nfunction fetchStoreFabric<T = any> (endPoint: string) {\n  return (): Promise<T> => {\n    const fullUrl = `${hostUrl}/${endPoint}`\n    return fetch(fullUrl).then((res) => res.json());\n  }\n}\n\nexport function getDefaultStore<T> (defaultData: T): StoreItem<T> {\n  return ({\n    data: defaultData,\n    isLoading: true,\n    error: '',\n  })\n}\n\nexport const fetchOrderSizeInfo = IS_STUBS\n  ? fetchStubStoreFabric<OrderSizeInfo>(orderSizeInfoStub, 750)\n  : fetchStoreFabric<OrderSizeInfo>('orderSizeInfo')\n\nexport const fetchToppings = IS_STUBS\n  ? fetchStubStoreFabric<ToppingData[]>(toppingsStub, 1500)\n  : fetchStoreFabric<ToppingData[]>('toppings')\n\nexport const sendNewOrder = IS_STUBS\n? sendDataStubStoreFabric<Order, string>('Your pizza will start cook soon!', 750)\n: (order: Order): Promise<string> => {\n  const endPoint = 'newOrder'\n  const fullUrl = `${hostUrl}/${endPoint}`\n  return fetch(\n    fullUrl,\n    {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(order),\n    }\n  )\n    .then((res) => res.text());\n}\n\ninterface ContextProps {\n  toppings: StoreItem<ToppingData[]>;\n  orderSizeInfo: StoreItem<OrderSizeInfo>;\n  order: Order;\n  setOrder: (order: any) => void;\n  isFormValid: boolean;\n  setIsFormValid: (bool: boolean) => void;\n  modalContent: ModalContent;\n  setModalContent: (modalContent: ModalContent) => void;\n  isModalShow: boolean;\n  setIsModalShow: (isModalShow: boolean) => void;\n}\n\nexport const Context = React.createContext<ContextProps>({\n  orderSizeInfo: getDefaultStore<OrderSizeInfo>({}),\n  toppings: getDefaultStore<ToppingData[]>([]),\n  order: {\n    size: OrderSize.Medium,\n    isThick: false,\n    toppings: [],\n  },\n  setOrder: () => {},\n  isFormValid: true,\n  setIsFormValid: () => {},\n  modalContent: {\n    header: '',\n    body: '',\n  },\n  setModalContent: () => {},\n  isModalShow: false,\n  setIsModalShow: () => {},\n});\n","import { camelCase } from 'lodash';\nimport React from 'react';\nimport './index.scss';\n\nenum ToppingName {\n  Pepperoni = 'pepperoni',\n  Mushrooms = 'mushrooms',\n  Onion = 'onion',\n  Sausage = 'sausage',\n  Bacon = 'bacon',\n  ExtraCheese = 'extra-cheese',\n  BlackOlives = 'black-olives',\n  GreenPeppers = 'green-peppers',\n  Pineapple = 'pineapple',\n  Spinach = 'spinach',\n}\n\nexport enum PizzaToggleToppingShape {\n  Round = 'round',\n  Ring = 'ring',\n  Oval = 'oval',\n  Square = 'square',\n  Gull = 'gull',\n}\n\nconst mapToppingNameToToppingShape: {[key: string]: PizzaToggleToppingShape} = {\n  [ToppingName.Pepperoni]: PizzaToggleToppingShape.Round,\n  [ToppingName.Mushrooms]: PizzaToggleToppingShape.Gull,\n  [ToppingName.Onion]: PizzaToggleToppingShape.Ring,\n  [ToppingName.Sausage]: PizzaToggleToppingShape.Oval,\n  [ToppingName.Bacon]: PizzaToggleToppingShape.Square,\n  [ToppingName.ExtraCheese]: PizzaToggleToppingShape.Round,\n  [ToppingName.BlackOlives]: PizzaToggleToppingShape.Round,\n  [ToppingName.GreenPeppers]: PizzaToggleToppingShape.Gull,\n  [ToppingName.Pineapple]: PizzaToggleToppingShape.Square,\n  [ToppingName.Spinach]: PizzaToggleToppingShape.Round,\n}\n\nexport enum PizzaTogglePizzaShape {\n  Thick = 'thick',\n  Big = 'big',\n  Default = 'default',\n}\n\ninterface PizzaToggleProps {\n  className?: string;\n  checked?: boolean;\n  onChange?: (e: any) => void;\n  toppingName?: ToppingName;\n  toppingShape?: PizzaToggleToppingShape;\n  pizzaShape?: PizzaTogglePizzaShape;\n  titleText?: string;\n  titleColor?: string;\n}\n\nconst PizzaToggle: React.FC<PizzaToggleProps> = (\n  {\n    className = '',\n    checked,\n    onChange = (e) => void(0),\n    toppingName,\n    toppingShape,\n    pizzaShape = PizzaTogglePizzaShape.Default,\n    titleText = 'pepperoni',\n    titleColor = 'yellow',\n  }\n) => (\n  <div className={[\n    'PizzaToggle',\n    ...(toppingName\n      ? [\n        `PizzaToggle_toppingName_${camelCase(toppingName)}`,\n        `PizzaToggle_toppingShape_${mapToppingNameToToppingShape[toppingName]}`\n      ]\n      : [\n        `PizzaToggle_toppingShape_${toppingShape}`\n      ]),\n    `PizzaToggle_pizzaShape_${pizzaShape}`,\n    className,\n  ].join(' ')}>\n    <div\n      className=\"PizzaToggle__title\"\n      style={{\n        color: titleColor,\n      }}\n    >\n      {titleText}\n    </div>\n    <input\n      type=\"checkbox\"\n      onChange={onChange}\n      checked={checked}\n    />\n    <div className=\"PizzaToggle__shadow\"/>\n    <div className=\"PizzaToggle__pizza\">\n      <div className=\"PizzaToggle__inner\">\n        { new Array(5).fill(0).map((val, index) => (\n          <div\n            key={index}\n            className=\"PizzaToggle__topping\"\n          />\n        )) }\n      </div>\n    </div>\n  </div>\n)\n\nexport default PizzaToggle;\n","import React, { useContext } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { Context } from '../../data';\n\nconst ModalContainer: React.FC = () => {\n  const {\n    isFormValid,\n    modalContent,\n    isModalShow,\n    setIsModalShow\n  } = useContext(Context);\n\n  const handleClose = () => setIsModalShow(false);\n\n  return <div className=\"ErrorHandler\">\n    <Modal show={isModalShow} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>{modalContent.header}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{modalContent.body}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  </div>\n}\n\nexport default ModalContainer;\n","import React from 'react';\nimport './index.scss'\n\nconst Divider: React.FC<{ text: string }> = (props) => (\n  <div className=\"Divider\">{props.text}</div>\n);\n\nexport default Divider;\n","import { ModalContent} from '../types';\nimport * as _ from 'lodash';\nimport { Order, OrderSizeInfo } from '../types/apiTypes';\n\nexport const formatToppingText = (str: string) => {\n  return _.capitalize(str).replace(/-/g, ' ');\n};\n\nexport const formatPrice = (amount: number, currencyId?: string) => {\n  const options = {\n    style: 'currency',\n    currency: currencyId || 'USD',\n    minimumFractionDigits: 2\n  };\n\n  const formatter = new Intl.NumberFormat('en-US', options);\n  return formatter.format(amount / 100);\n};\n\nexport const classList = (classes: object) => {\n  return Object.entries(classes)\n    .filter((entry) => entry[1])\n    .map((entry) => entry[0])\n    .join(' ');\n};\n\nexport const getRemoveToppingsModalContent = (order: Order, size: string, orderSizeInfo: OrderSizeInfo): ModalContent => {\n  const { maximumToppings } = orderSizeInfo[size]\n  return ({\n    header: 'Toppings Limit',\n    body: `Please, remove ${order.toppings.length - maximumToppings} toppings. The maximum of toppings for the ${order.size} size is ${maximumToppings}, but the current number is ${order.toppings.length}.`,\n  })\n}\n","import React from 'react';\nimport { Context } from '../../data';\nimport { classList, getRemoveToppingsModalContent } from '../../utils';\n\nimport './index.scss'\nimport { Alert, Spinner } from 'react-bootstrap';\nimport { Order } from '../../types/apiTypes';\n\nconst SizePicker: React.FC = () => {\n  const {\n    orderSizeInfo,\n    order,\n    setOrder,\n    setModalContent,\n    setIsFormValid,\n    setIsModalShow,\n  } = React.useContext(Context);\n\n  const handleSetOrder = (size: string) => () => {\n    const { maximumToppings } = orderSizeInfo.data[size]\n    if (order.toppings.length > maximumToppings) {\n      setModalContent(getRemoveToppingsModalContent(order, size, orderSizeInfo.data));\n      setIsFormValid(false);\n      setIsModalShow(true);\n    }\n\n    setOrder((prev: Order) => ({ ...prev, size }));\n  };\n\n  return (\n    <div className=\"SizePicker\">\n      <div className=\"SizePicker__dishes\">\n        { orderSizeInfo.isLoading\n          ? <Spinner animation=\"border\" variant=\"warning\" />\n          : orderSizeInfo.error\n            ? <Alert variant=\"danger\">{orderSizeInfo.error}</Alert>\n            : Object.entries(orderSizeInfo.data).map(([size, details], i) => (\n              <div\n                key={i}\n                onClick={handleSetOrder(size)}\n                className={classList({\n                  'SizePicker__size-dish': true,\n                  [`SizePicker__size-dish--${size}`]: true,\n                  active: order.size === size\n                })}\n              >\n                {details.inches}\"\n              </div>\n            ))\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default SizePicker;\n","import React from 'react';\nimport './index.scss';\nimport PizzaToggle, { PizzaTogglePizzaShape, PizzaToggleToppingShape } from '../PizzaToggle';\nimport { ToppingName } from '../../types/apiTypes';\n\ninterface CardToggleProps {\n  className?: string;\n  onClick?: (e: any) => void;\n  checked?: boolean;\n  imgSrc?: string;\n  titleText?: string;\n  titleColor?: string;\n  toppingName?: ToppingName;\n  toppingShape?: PizzaToggleToppingShape;\n  pizzaShape?: PizzaTogglePizzaShape;\n}\n\nconst CardToggle: React.FC<CardToggleProps> = (\n  {\n    className = '',\n    onClick = () => void(0),\n    checked,\n    imgSrc = '',\n    titleText,\n    titleColor = 'white',\n    toppingName,\n    toppingShape,\n    pizzaShape,\n  }\n) => {\n  return <div\n    className={`CardToggle ${className}`}\n    onClick={onClick}\n  >\n    <img\n      className=\"CardToggle__img\"\n      alt={titleText}\n      src={imgSrc}\n    />\n    <PizzaToggle\n      className=\"CardToggle__PizzaToggle\"\n      checked={checked}\n      titleText={titleText}\n      titleColor={titleColor}\n      toppingName={toppingName}\n      toppingShape={toppingShape}\n      pizzaShape={pizzaShape}\n    />\n  </div>\n}\n\nexport default CardToggle;\n","import React, { useContext } from 'react';\nimport { PizzaTogglePizzaShape } from '../../components/PizzaToggle';\nimport CardToggle from '../../components/CardToggle';\nimport { Context } from '../../data';\nimport { Order } from '../../types/apiTypes';\n\nconst CrustTypePicker: React.FC = () => {\n  const { order, setOrder } = useContext(Context);\n\n  const handleSetOrder = () => {\n    setOrder((prev: Order) => ({ ...prev, isThick: !order.isThick }));\n  };\n\n  return (\n    <CardToggle\n      imgSrc=\"./toggles/thin-thick-middle-pizza-with-arrows.png\"\n      titleText=\"&nbsp;THIN / THICK\"\n      titleColor=\"black\"\n      pizzaShape={PizzaTogglePizzaShape.Thick}\n      onClick={handleSetOrder}\n      checked={order.isThick}\n    />\n  );\n};\n\nexport default CrustTypePicker;\n","import React from 'react';\nimport * as _ from 'lodash';\n\nimport { Context } from '../../data';\nimport CardToggle from '../../components/CardToggle';\nimport { formatToppingText } from '../../utils';\n\nimport './index.scss'\nimport { Order, ToppingData } from '../../types/apiTypes';\nimport { Alert, Spinner } from 'react-bootstrap';\n\nconst ToppingsPicker: React.FC = () => {\n  const {\n    orderSizeInfo,\n    toppings,\n    order,\n    setOrder,\n    setModalContent,\n    setIsFormValid,\n    setIsModalShow,\n  } = React.useContext(Context);\n\n  const toggleSelect = (order: Order, topping: ToppingData) => () => {\n    const exists = _.find(order.toppings, { name: topping.name });\n    const newToppings = exists\n      ? order.toppings.filter((t) => t.name !== topping.name)\n      : [...order.toppings, topping];\n\n    const { maximumToppings } = orderSizeInfo.data[order.size]\n\n    if (\n      newToppings.length > maximumToppings &&\n      newToppings.length > order.toppings.length\n    ) {\n      setModalContent({\n        header: 'Toppings Limit',\n        body: `The maximum of toppings for the ${order.size} size is ${maximumToppings}.`,\n      });\n      setIsModalShow(true);\n    } else {\n      if (newToppings.length <= maximumToppings) {\n        setModalContent({\n          header: '',\n          body: '',\n        });\n        setIsFormValid(true)\n      }\n      setOrder((prev: Order) => {\n        return { ...prev, toppings: newToppings };\n      });\n    }\n  };\n\n  return (\n    <div className=\"ToppingsPicker\">\n      <div className=\"ToppingsPicker__list\">\n        { toppings.isLoading || orderSizeInfo.isLoading\n          ? <Spinner animation=\"border\" variant=\"warning\" />\n          : toppings.error || orderSizeInfo.error\n            ? <Alert variant=\"danger\">{toppings.error}</Alert>\n            : toppings.data.map((topping) => (\n              <CardToggle\n                key={topping.name}\n                onClick={toggleSelect(order, topping)}\n                checked={!!_.find(order.toppings, {\n                  name: topping.name\n                })}\n                imgSrc={`./toggles/${topping.onPizza}`}\n                titleText={formatToppingText(topping.name)}\n                titleColor={topping.titleColor}\n                toppingName={topping.name}\n              />\n            ))\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default ToppingsPicker;\n","import React from 'react';\n\nimport Divider from '../../components/Divider';\nimport SizePicker from '../SizePicker';\nimport CrustTypePicker from '../CrustTypePicker';\nimport ToppingsPicker from '../ToppingsPicker';\n\nimport './index.scss'\n\nconst PizzaForm: React.FC = () => (\n  <div className=\"PizzaForm\">\n    <div className=\"PizzaForm__inner\">\n      <Divider text=\"Size\" />\n      <SizePicker />\n      <Divider text=\"Crust type\" />\n      <CrustTypePicker/>\n      <Divider text=\"Toppings\" />\n      <ToppingsPicker />\n    </div>\n  </div>\n);\n\nexport default PizzaForm;\n","import React from 'react';\n\nimport { Context } from '../../data';\n\nimport './index.scss'\n\ninterface PizzaPreviewProps {\n  className?: string;\n}\n\nconst PizzaPreview: React.FC<PizzaPreviewProps> = (\n  {\n    className = '',\n  }\n) => {\n  const { order } = React.useContext(Context);\n\n  return (\n    <div className={`PizzaPreview ${className}`}>\n      <img\n        className=\"PizzaPreview__part\"\n        src={`./pizza-base.png`}\n        alt=\"\"\n      />\n      <img\n        className=\"PizzaPreview__part\"\n        src={`./pizza-sauce.png`}\n        alt=\"\"\n      />\n      {order.toppings.map(({onPizza}, i) => (\n        <img\n          key={onPizza}\n          className=\"PizzaPreview__part\"\n          src={`./toppings/on-pizza/${onPizza}`}\n          alt=\"\"\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default PizzaPreview;\n","import React from 'react';\n\nimport { Context } from '../../data';\nimport { formatPrice, formatToppingText } from '../../utils';\n\nimport './index.scss'\nimport { Alert, Spinner } from 'react-bootstrap';\n\nconst OrderInfo: React.FC = () => {\n  const {\n    order,\n    orderSizeInfo,\n  } = React.useContext(Context);\n  if (orderSizeInfo.isLoading) {\n    return <div className=\"OrderInfo\">\n      <Spinner animation=\"border\" variant=\"warning\" />\n    </div>\n  }\n  if (orderSizeInfo.error) {\n    return <div className=\"OrderInfo\">\n      <Alert variant=\"danger\">{orderSizeInfo.error}</Alert>\n    </div>\n  }\n\n  console.log('front/src/containers/OrderInfo/index.tsx:orderSizeInfo', orderSizeInfo);\n\n  const {toppings, size} = order;\n  const sizePrice = orderSizeInfo.data[size].price\n  const crustTypePrice = order.isThick ? 400 : 200\n  const toppingsPrice = toppings.length > 3\n    ? (toppings.length - 3) * 50\n    : 0\n  const totalPrice = sizePrice + crustTypePrice + toppingsPrice\n\n  return (\n    <div className=\"OrderInfo\">\n      <ul className=\"OrderInfo__list\">\n        <li className=\"OrderInfo__item\">\n          <span>{formatToppingText(size)} Size</span>\n          <span>{formatPrice(sizePrice)}</span>\n        </li>\n        <li className=\"OrderInfo__item\">\n          <span>{order.isThick ? 'Thick' : 'Thin'} Crust type</span>\n          <span>{formatPrice(crustTypePrice)}</span>\n        </li>\n        <li className=\"OrderInfo__item\">\n          <span>Toppings</span>\n          <span>{formatPrice(toppingsPrice)}</span>\n        </li>\n      </ul>\n      <div className=\"OrderInfo__total\">\n        <span>Total:</span>\n        <span>{formatPrice(totalPrice)}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderInfo\n","import React, { useState } from 'react';\n\nimport { Context, sendNewOrder } from '../../data';\n\nimport './index.scss'\nimport { getRemoveToppingsModalContent } from '../../utils';\nimport { Spinner } from 'react-bootstrap';\n\nconst OrderButton: React.FC = () => {\n  const {\n    orderSizeInfo,\n    order,\n    isFormValid,\n    setIsModalShow,\n    setModalContent,\n  } = React.useContext(Context);\n\n  const [isLoading, seIsLoading] = useState<boolean>(false)\n\n  return (\n    <button\n      onClick={async () => {\n        if (orderSizeInfo.isLoading || orderSizeInfo.error || isLoading) {\n          return\n        }\n        if (isFormValid) {\n          try {\n            seIsLoading(true)\n            const response = await sendNewOrder(order)\n            setModalContent({\n              header: 'Success!',\n              body: response\n            })\n            seIsLoading(false)\n          } catch (e) {\n            setModalContent({\n              header: 'Error',\n              body: String(e)\n            })\n          }\n        } else {\n          setModalContent(getRemoveToppingsModalContent(order, order.size, orderSizeInfo.data))\n        }\n        setIsModalShow(true)\n      }}\n      className=\"OrderButton\"\n    >\n      {orderSizeInfo.isLoading || isLoading\n        ? <Spinner animation=\"border\" variant=\"warning\" />\n        : orderSizeInfo.error\n          ? orderSizeInfo.error\n          : 'Make an order'\n      }\n    </button>\n  );\n};\n\nexport default OrderButton;\n","import React from 'react';\n\nimport OrderInfo from '../OrderInfo';\nimport OrderButton from '../OrderButton';\n\nimport './index.scss'\n\nconst OrderSection: React.FC = () => (\n  <div className=\"OrderSection\">\n    <OrderInfo />\n    <OrderButton />\n  </div>\n)\n\nexport default OrderSection;\n","import React from 'react';\n\nimport PizzaPreview from '../PizzaPreview';\nimport Divider from '../../components/Divider';\nimport OrderSection from '../OrderSection';\n\nimport './index.scss'\n\nconst PizzaDisplay: React.FC = () => (\n  <div className=\"PizzaDisplay\">\n    <PizzaPreview />\n    <Divider text=\"Information about order\" />\n    <OrderSection />\n  </div>\n)\n\nexport default PizzaDisplay;\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport ModalContainer from './containers/Modal';\nimport { Context, fetchOrderSizeInfo, fetchToppings, getDefaultStore, StoreItem } from './data';\nimport PizzaForm from './containers/PizzaForm';\nimport PizzaDisplay from './containers/PizzaDisplay';\n\nimport './App.scss';\nimport { Order, OrderSize, OrderSizeInfo, ToppingData } from './types/apiTypes';\n\nconst App: React.FC = () => {\n  const [toppings, setToppings] = useState<StoreItem<ToppingData[]>>(getDefaultStore<ToppingData[]>([]))\n  const [orderSizeInfo, setOrderSizeInfo] = useState<StoreItem<OrderSizeInfo>>(getDefaultStore<OrderSizeInfo>({}))\n  const [order, setOrder] = React.useState<Order>({\n    size: OrderSize.Medium,\n    isThick: false,\n    toppings: [],\n  });\n  const [isFormValid, setIsFormValid] = React.useState(true);\n  const [modalContent, setModalContent] = React.useState({\n    header: '',\n    body: '',\n  });\n  const [isModalShow, setIsModalShow] = React.useState(false);\n\n  useEffect(() => {\n    ;(async () => {\n      fetchToppings()\n        .then((toppingsRequest) => {\n          setToppings({\n            data: toppingsRequest,\n            isLoading: false,\n            error: '',\n          })\n        })\n        .catch((e) => {\n          setToppings({\n            data: [],\n            isLoading: false,\n            error: String(e),\n          })\n        })\n    })()\n    ;(async () => {\n      try {\n        setOrderSizeInfo({\n          data: await fetchOrderSizeInfo(),\n          isLoading: false,\n          error: '',\n        })\n      } catch (e) {\n        setOrderSizeInfo({\n          data: {},\n          isLoading: false,\n          error: String(e),\n        })\n      }\n    })()\n  }, []);\n\n  return (\n    <Context.Provider\n      value={{\n        orderSizeInfo,\n        toppings,\n        order,\n        setOrder,\n        isFormValid,\n        setIsFormValid,\n        modalContent,\n        setModalContent,\n        isModalShow,\n        setIsModalShow,\n      }}\n    >\n      <div className=\"app\">\n        <PizzaDisplay />\n        <PizzaForm />\n        <ModalContainer />\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}